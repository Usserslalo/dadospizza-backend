// test-categorias-productos.js
// Script para probar los endpoints de categor√≠as y productos

const { PrismaClient } = require('@prisma/client');

async function testEndpoints() {
  const prisma = new PrismaClient();
  
  try {
    console.log('üîç REVISI√ìN COMPLETA DEL BACKEND - FILTRADO POR CATEGOR√çAS\n');
    console.log('=' .repeat(80));

    // 1. Verificar estructura de la base de datos
    console.log('\nüìä 1. ESTRUCTURA DE LA BASE DE DATOS');
    console.log('-'.repeat(50));

    // Verificar categor√≠as
    console.log('\nüóÇÔ∏è  CATEGOR√çAS DISPONIBLES:');
    const categories = await prisma.categories.findMany({
      orderBy: { id: 'asc' }
    });
    
    categories.forEach(cat => {
      console.log(`   ID: ${cat.id} | Nombre: "${cat.name}" | Descripci√≥n: "${cat.description}"`);
    });

    // Verificar productos
    console.log('\nüçï PRODUCTOS DISPONIBLES:');
    const products = await prisma.products.findMany({
      include: {
        categories: true
      },
      where: {
        is_available: true
      },
      orderBy: { id: 'asc' }
    });
    
    products.forEach(product => {
      console.log(`   ID: ${product.id} | Nombre: "${product.name}" | Categor√≠a ID: ${product.id_category} | Categor√≠a: "${product.categories.name}"`);
    });

    // 2. Simular endpoint de categor√≠as
    console.log('\n\nüåê 2. ENDPOINT DE CATEGOR√çAS');
    console.log('-'.repeat(50));
    console.log('GET /api/categories');
    console.log('\nRespuesta JSON:');
    const categoriesResponse = {
      success: true,
      data: categories.map(cat => ({
        id: cat.id.toString(),
        name: cat.name,
        description: cat.description,
        created_at: cat.created_at,
        updated_at: cat.updated_at
      }))
    };
    console.log(JSON.stringify(categoriesResponse, null, 2));

    // 3. Simular endpoint de productos
    console.log('\n\nüåê 3. ENDPOINT DE PRODUCTOS');
    console.log('-'.repeat(50));
    console.log('GET /api/products');
    console.log('\nRespuesta JSON (primeros 3 productos):');
    const productsResponse = {
      success: true,
      data: products.slice(0, 3).map(product => ({
        id: product.id.toString(),
        name: product.name,
        description: product.description,
        price: product.price ? product.price.toString() : null,
        id_category: product.id_category.toString(),
        is_available: product.is_available,
        created_at: product.created_at,
        updated_at: product.updated_at,
        categories: {
          id: product.categories.id.toString(),
          name: product.categories.name,
          description: product.categories.description,
          created_at: product.categories.created_at,
          updated_at: product.categories.updated_at
        },
        product_images: []
      }))
    };
    console.log(JSON.stringify(productsResponse, null, 2));

    // 4. An√°lisis de compatibilidad
    console.log('\n\nüîç 4. AN√ÅLISIS DE COMPATIBILIDAD');
    console.log('-'.repeat(50));

    // Verificar si hay productos por categor√≠a
    console.log('\nüìà PRODUCTOS POR CATEGOR√çA:');
    for (const category of categories) {
      const productsInCategory = products.filter(p => p.id_category === category.id);
      console.log(`   ${category.name}: ${productsInCategory.length} productos`);
      
      if (productsInCategory.length > 0) {
        productsInCategory.slice(0, 2).forEach(product => {
          console.log(`     - ${product.name}`);
        });
        if (productsInCategory.length > 2) {
          console.log(`     ... y ${productsInCategory.length - 2} m√°s`);
        }
      }
    }

    // 5. Verificar problemas potenciales
    console.log('\n\n‚ö†Ô∏è  5. VERIFICACI√ìN DE PROBLEMAS');
    console.log('-'.repeat(50));

    // Verificar si hay productos sin categor√≠a
    const productsWithoutCategory = products.filter(p => !p.categories);
    if (productsWithoutCategory.length > 0) {
      console.log(`‚ùå PROBLEMA: ${productsWithoutCategory.length} productos sin categor√≠a`);
    } else {
      console.log('‚úÖ Todos los productos tienen categor√≠a asignada');
    }

    // Verificar si hay categor√≠as sin productos
    const categoriesWithoutProducts = categories.filter(cat => 
      !products.some(p => p.id_category === cat.id)
    );
    if (categoriesWithoutProducts.length > 0) {
      console.log(`‚ùå PROBLEMA: ${categoriesWithoutProducts.length} categor√≠as sin productos:`);
      categoriesWithoutProducts.forEach(cat => {
        console.log(`   - ${cat.name} (ID: ${cat.id})`);
      });
    } else {
      console.log('‚úÖ Todas las categor√≠as tienen productos');
    }

    // Verificar consistencia de IDs
    const categoryIds = categories.map(c => c.id);
    const productCategoryIds = [...new Set(products.map(p => p.id_category))];
    const missingCategoryIds = productCategoryIds.filter(id => !categoryIds.includes(id));
    
    if (missingCategoryIds.length > 0) {
      console.log(`‚ùå PROBLEMA: Productos con category_id que no existe: ${missingCategoryIds.join(', ')}`);
    } else {
      console.log('‚úÖ Todos los category_id de productos existen en la tabla categories');
    }

    // 6. Recomendaciones
    console.log('\n\nüí° 6. RECOMENDACIONES PARA EL FRONTEND');
    console.log('-'.repeat(50));

    console.log('\nüìã ESTRUCTURA CORRECTA PARA EL FILTRADO:');
    console.log('1. Campo para filtrar: product.id_category (BigInt)');
    console.log('2. Campo para comparar: category.id (BigInt)');
    console.log('3. Conversi√≥n necesaria: Ambos deben ser convertidos a string o int para comparar');
    
    console.log('\nüîß C√ìDIGO DE FILTRADO SUGERIDO:');
    console.log(`
// En el ProductProvider de Flutter
List<Product> get filteredProducts {
  List<Product> filtered = List.from(_allProducts);
  
  if (_selectedCategoryId != null) {
    filtered = filtered.where((product) => 
      product.idCategory.toString() == _selectedCategoryId
    ).toList();
  }
  
  return filtered;
}
    `);

    console.log('\n‚úÖ CONCLUSI√ìN:');
    console.log('El backend est√° correctamente estructurado. El problema est√° en el frontend:');
    console.log('- Los productos tienen id_category como BigInt');
    console.log('- Las categor√≠as tienen id como BigInt');
    console.log('- El filtrado debe comparar estos valores correctamente');

  } catch (error) {
    console.error('‚ùå Error en la revisi√≥n:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Ejecutar la revisi√≥n
testEndpoints();
