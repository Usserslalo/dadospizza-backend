// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model addons {
  id                BigInt              @id @default(autoincrement())
  name              String              @unique(map: "addons_name_key") @db.VarChar(100)
  created_at        DateTime            @db.Timestamp(0)
  updated_at        DateTime            @db.Timestamp(0)
  addon_prices      addon_prices[]
  order_item_addons order_item_addons[] // LÍNEA AÑADIDA
}

model addon_prices {
  id         BigInt   @id @default(autoincrement())
  id_addon   BigInt
  id_size    BigInt
  price      Decimal  @db.Decimal(10, 2)
  created_at DateTime @db.Timestamp(0)
  updated_at DateTime @db.Timestamp(0)
  addons     addons   @relation(fields: [id_addon], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sizes      sizes    @relation(fields: [id_size], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([id_addon, id_size], map: "addon_prices_id_addon_id_size_key")
}

model address {
  id           BigInt   @id @default(autoincrement())
  id_user      BigInt
  address      String   @db.VarChar(255)
  neighborhood String   @db.VarChar(180)
  alias        String?  @db.VarChar(100)
  lat          Float
  lng          Float
  created_at   DateTime @db.Timestamp(0)
  updated_at   DateTime @db.Timestamp(0)
  users        users    @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orders       orders[]
}

model branches {
  id         BigInt   @id @default(autoincrement())
  name       String   @db.VarChar(100)
  address    String
  lat        Float?
  lng        Float?
  phone      String?  @db.VarChar(20)
  created_at DateTime @db.Timestamp(0)
  updated_at DateTime @db.Timestamp(0)
  orders     orders[]
  users      users[] // LÍNEA AÑADIDA
}

model categories {
  id              BigInt            @id @default(autoincrement())
  name            String            @unique(map: "categories_name_key") @db.VarChar(180)
  description     String?
  created_at      DateTime          @db.Timestamp(0)
  updated_at      DateTime          @db.Timestamp(0)
  category_prices category_prices[]
  products        products[]
}

model category_prices {
  id          BigInt     @id @default(autoincrement())
  id_category BigInt
  id_size     BigInt
  price       Decimal    @db.Decimal(10, 2)
  created_at  DateTime   @db.Timestamp(0)
  updated_at  DateTime   @db.Timestamp(0)
  categories  categories @relation(fields: [id_category], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sizes       sizes      @relation(fields: [id_size], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([id_category, id_size], map: "category_prices_id_category_id_size_key")
}

model order_has_products {
  id                BigInt              @id @default(autoincrement())
  id_order          BigInt
  id_product        BigInt
  id_size           BigInt?
  quantity          Int
  price_per_unit    Decimal             @db.Decimal(10, 2)
  created_at        DateTime            @db.Timestamp(0)
  updated_at        DateTime            @db.Timestamp(0)
  orders            orders              @relation(fields: [id_order], references: [id], onDelete: Cascade, onUpdate: Cascade)
  products          products            @relation(fields: [id_product], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sizes             sizes?              @relation(fields: [id_size], references: [id], onDelete: Cascade, onUpdate: Cascade)
  order_item_addons order_item_addons[]
}

model order_item_addons {
  id                   BigInt             @id @default(autoincrement())
  id_order_has_product BigInt
  id_addon             BigInt
  price_at_purchase    Decimal            @db.Decimal(10, 2)
  created_at           DateTime           @db.Timestamp(0)
  updated_at           DateTime           @db.Timestamp(0)
  addons               addons             @relation(fields: [id_addon], references: [id], onDelete: Cascade, onUpdate: Cascade)
  order_has_products   order_has_products @relation(fields: [id_order_has_product], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model orders {
  id                              BigInt               @id @default(autoincrement())
  id_client                       BigInt
  id_delivery                     BigInt?
  id_address                      BigInt
  id_branch                       BigInt
  status                          String               @db.VarChar(90) // ENUMs son manejados por Prisma, se define como string
  payment_method                  String               @default("Efectivo") @db.VarChar(50)
  subtotal                        Decimal              @default(0) @db.Decimal(10, 2)
  delivery_fee                    Decimal              @default(0) @db.Decimal(10, 2)
  total                           Decimal              @default(0) @db.Decimal(10, 2)
  created_at                      DateTime             @db.Timestamp(0)
  updated_at                      DateTime             @db.Timestamp(0)
  address                         address              @relation(fields: [id_address], references: [id], onDelete: Cascade, onUpdate: Cascade)
  branches                        branches             @relation(fields: [id_branch], references: [id], onDelete: Cascade, onUpdate: Cascade)
  users_orders_id_clientTousers   users                @relation("orders_id_clientTousers", fields: [id_client], references: [id], onDelete: Cascade, onUpdate: Cascade)
  users_orders_id_deliveryTousers users?               @relation("orders_id_deliveryTousers", fields: [id_delivery], references: [id], onDelete: Cascade, onUpdate: Cascade)
  order_has_products              order_has_products[]
}

model product_images {
  id         BigInt   @id @default(autoincrement())
  id_product BigInt
  image_url  String   @db.VarChar(255)
  created_at DateTime @db.Timestamp(0)
  updated_at DateTime @db.Timestamp(0)
  products   products @relation(fields: [id_product], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model products {
  id                 BigInt               @id @default(autoincrement())
  name               String               @unique(map: "products_name_key") @db.VarChar(180)
  description        String
  price              Decimal?             @db.Decimal(10, 2)
  id_category        BigInt
  is_available       Boolean?             @default(true)
  created_at         DateTime             @db.Timestamp(0)
  updated_at         DateTime             @db.Timestamp(0)
  categories         categories           @relation(fields: [id_category], references: [id], onDelete: Cascade, onUpdate: Cascade)
  order_has_products order_has_products[]
  product_images     product_images[]
}

model roles {
  id             BigInt           @id @default(autoincrement())
  name           String           @unique(map: "roles_name_key") @db.VarChar(90)
  image          String?          @db.VarChar(255)
  route          String           @db.VarChar(180)
  created_at     DateTime         @db.Timestamp(0)
  updated_at     DateTime         @db.Timestamp(0)
  user_has_roles user_has_roles[]
}

model sizes {
  id                 BigInt               @id @default(autoincrement())
  name               String               @unique(map: "sizes_name_key") @db.VarChar(100)
  created_at         DateTime             @db.Timestamp(0)
  updated_at         DateTime             @db.Timestamp(0)
  addon_prices       addon_prices[]
  category_prices    category_prices[]
  order_has_products order_has_products[]
}

model user_has_roles {
  id_user    BigInt
  id_rol     BigInt
  created_at DateTime @db.Timestamp(0)
  updated_at DateTime @db.Timestamp(0)
  roles      roles    @relation(fields: [id_rol], references: [id], onDelete: Cascade, onUpdate: Cascade)
  users      users    @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([id_user, id_rol])
}

model users {
  id                               BigInt           @id @default(autoincrement())
  email                            String           @unique @db.VarChar(180)
  name                             String           @db.VarChar(90)
  lastname                         String           @db.VarChar(90)
  notification_token               String?          @db.VarChar(255)
  phone                            String           @unique @db.VarChar(90)
  image                            String?          @db.VarChar(255)
  password                         String           @db.VarChar(255)
  created_at                       DateTime         @db.Timestamp(0)
  updated_at                       DateTime         @db.Timestamp(0)
  id_branch                        BigInt?
  address                          address[]
  branches                         branches?        @relation(fields: [id_branch], references: [id], onDelete: SetNull, onUpdate: Cascade)
  orders_orders_id_clientTousers   orders[]         @relation("orders_id_clientTousers")
  orders_orders_id_deliveryTousers orders[]         @relation("orders_id_deliveryTousers")
  user_has_roles                   user_has_roles[]
}