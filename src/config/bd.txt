use dados_pizza;

/*
================================================================
SCRIPT DE BASE DE DATOS OPTIMIZADO PARA DADOS PIZZA
================================================================
Versión 2.0
Cambios principales:
1.  Añadidas tablas para Sucursales (branches).
2.  Reestructuración completa del sistema de precios para soportar
    precios por categoría y tamaño.
3.  Añadida la lógica para "Add-ons" (extras como orilla de queso).
4.  Ajustes en las tablas de órdenes para reflejar los nuevos cambios.
================================================================
*/

-- (Opcional) Borra la base de datos si existe para empezar de cero
-- DROP DATABASE IF EXISTS dadospizza;
-- CREATE DATABASE dadospizza;
USE dados_pizza;

/*
========================================
SECCIÓN 1: USUARIOS Y ROLES (Sin cambios mayores)
========================================
*/

CREATE TABLE users(
	id BIGINT PRIMARY KEY AUTO_INCREMENT,
    email VARCHAR(180) NOT NULL UNIQUE,
    name VARCHAR(90) NOT NULL,
    lastname VARCHAR(90) NOT NULL,
    notification_token VARCHAR(255),
    phone VARCHAR(90) NOT NULL UNIQUE,
    image VARCHAR(255) NULL,
    password VARCHAR(255) NOT NULL, -- Longitud correcta para hash
    created_at TIMESTAMP(0) NOT NULL,
    updated_at TIMESTAMP(0) NOT NULL
);

CREATE TABLE roles(
	id BIGINT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(90) NOT NULL UNIQUE,
    image VARCHAR(255) NULL,
    route VARCHAR(180) NOT NULL,
    created_at TIMESTAMP(0) NOT NULL,
    updated_at TIMESTAMP(0) NOT NULL
);

CREATE TABLE user_has_roles(
	id_user BIGINT NOT NULL,
    id_rol BIGINT NOT NULL,
    created_at TIMESTAMP(0) NOT NULL,
    updated_at TIMESTAMP(0) NOT NULL,
    FOREIGN KEY(id_user) REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY(id_rol) REFERENCES roles(id) ON UPDATE CASCADE ON DELETE CASCADE,
    PRIMARY KEY(id_user, id_rol)
);

/*
========================================
SECCIÓN 2: NUEVA ESTRUCTURA DE NEGOCIO Y PRODUCTOS
========================================
*/

-- NUEVA TABLA: Sucursales de la pizzería
CREATE TABLE branches (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100) NOT NULL, -- Ej: 'Dados Pizza - Matriz Ixmiquilpan'
    address TEXT NOT NULL,
    lat DOUBLE PRECISION,
    lng DOUBLE PRECISION,
    phone VARCHAR(20),
    created_at TIMESTAMP(0) NOT NULL,
    updated_at TIMESTAMP(0) NOT NULL
);

-- Tabla de Categorías (sin cambios)
CREATE TABLE categories(
	id BIGINT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(180) NOT NULL UNIQUE,
    description TEXT,
    created_at TIMESTAMP(0) NOT NULL,
    updated_at TIMESTAMP(0) NOT NULL
);

-- NUEVA TABLA: Tamaños disponibles
CREATE TABLE sizes (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100) NOT NULL UNIQUE, -- 'Personal', 'Mediana', 'Grande', etc.
    created_at TIMESTAMP(0) NOT NULL,
    updated_at TIMESTAMP(0) NOT NULL
);

-- Tabla de Productos MODIFICADA
-- La columna 'price' ahora es nullable para manejar productos con precio fijo y variable.
CREATE TABLE products(
	id BIGINT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(180) NOT NULL UNIQUE,
    description TEXT NOT NULL,
    price DECIMAL(10, 2) NULL, -- PRECIO FIJO (para bebidas, Megamix). Si es NULL, se usa la tabla category_prices.
    id_category BIGINT NOT NULL,
    is_available BOOLEAN DEFAULT TRUE, -- Para marcar productos como agotados
    created_at TIMESTAMP(0) NOT NULL,
    updated_at TIMESTAMP(0) NOT NULL,
    FOREIGN KEY(id_category) REFERENCES categories(id) ON UPDATE CASCADE ON DELETE CASCADE
);

-- Tabla para imágenes (sin cambios)
CREATE TABLE product_images (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    id_product BIGINT NOT NULL,
    image_url VARCHAR(255) NOT NULL,
    FOREIGN KEY(id_product) REFERENCES products(id) ON UPDATE CASCADE ON DELETE CASCADE
);

-- NUEVA TABLA CLAVE: Precios por Categoría y Tamaño
-- Aquí se define el precio de las pizzas.
CREATE TABLE category_prices (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    id_category BIGINT NOT NULL,
    id_size BIGINT NOT NULL,
    price DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (id_category) REFERENCES categories(id) ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (id_size) REFERENCES sizes(id) ON UPDATE CASCADE ON DELETE CASCADE,
    UNIQUE(id_category, id_size) -- Evita duplicados
);

/*
========================================
SECCIÓN 3: NUEVA ESTRUCTURA PARA ADD-ONS (EXTRAS)
========================================
*/

-- NUEVA TABLA: Define los tipos de extras que existen
CREATE TABLE addons (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100) NOT NULL UNIQUE, -- 'Orilla de Queso', 'Ingrediente Extra'
    created_at TIMESTAMP(0) NOT NULL,
    updated_at TIMESTAMP(0) NOT NULL
);

-- NUEVA TABLA: Define el precio de un extra dependiendo del tamaño de la pizza
CREATE TABLE addon_prices (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    id_addon BIGINT NOT NULL,
    id_size BIGINT NOT NULL,
    price DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (id_addon) REFERENCES addons(id) ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (id_size) REFERENCES sizes(id) ON UPDATE CASCADE ON DELETE CASCADE,
    UNIQUE(id_addon, id_size)
);

/*
========================================
SECCIÓN 4: ESTRUCTURA DE DIRECCIONES Y ÓRDENES (MODIFICADA)
========================================
*/

CREATE TABLE address(
	id BIGINT PRIMARY KEY AUTO_INCREMENT,
    id_user BIGINT NOT NULL,
    address VARCHAR(255) NOT NULL,
    neighborhood VARCHAR(180) NOT NULL,
    alias VARCHAR(100) NULL, -- Opcional para nombrar direcciones ('Casa', 'Oficina')
    lat DOUBLE PRECISION NOT NULL,
    lng DOUBLE PRECISION NOT NULL,
    created_at TIMESTAMP(0) NOT NULL,
    updated_at TIMESTAMP(0) NOT NULL,
    FOREIGN KEY(id_user) REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE
);

-- Tabla de Órdenes MODIFICADA
CREATE TABLE orders(
	id BIGINT PRIMARY KEY AUTO_INCREMENT,
    id_client BIGINT NOT NULL,
    id_delivery BIGINT NULL,
    id_address BIGINT NOT NULL,
    id_branch BIGINT NOT NULL, -- CAMBIO: A qué sucursal pertenece la orden
    status ENUM('PAGADO', 'EN PREPARACION', 'DESPACHADO', 'EN CAMINO', 'ENTREGADO', 'CANCELADO') NOT NULL,
    payment_method VARCHAR(50) NOT NULL DEFAULT 'Efectivo',
    subtotal DECIMAL(10, 2) NOT NULL DEFAULT 0,
    delivery_fee DECIMAL(10, 2) NOT NULL DEFAULT 0,
    total DECIMAL(10, 2) NOT NULL DEFAULT 0,
    created_at TIMESTAMP(0) NOT NULL,
    updated_at TIMESTAMP(0) NOT NULL,
    FOREIGN KEY(id_client) REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY(id_delivery) REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY(id_address) REFERENCES address(id) ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY(id_branch) REFERENCES branches(id) ON UPDATE CASCADE ON DELETE CASCADE -- CAMBIO: Llave foránea a sucursales
);

-- Tabla de detalle de la orden MODIFICADA
-- Ahora tiene su propio ID y guarda el tamaño del producto.
CREATE TABLE order_has_products(
    id BIGINT PRIMARY KEY AUTO_INCREMENT, -- CAMBIO: Propio ID para poder referenciarlo
	id_order BIGINT NOT NULL,
    id_product BIGINT NOT NULL,
    id_size BIGINT NULL, -- CAMBIO: Para saber el tamaño. Nulo para productos sin tamaño (bebidas).
    quantity INT NOT NULL,
    price_per_unit DECIMAL(10, 2) NOT NULL, -- Precio al momento de la compra
    created_at TIMESTAMP(0) NOT NULL,
    updated_at TIMESTAMP(0) NOT NULL,
    FOREIGN KEY(id_order) REFERENCES orders(id) ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY(id_product) REFERENCES products(id) ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY(id_size) REFERENCES sizes(id) ON UPDATE CASCADE ON DELETE CASCADE
);

-- NUEVA TABLA: Para registrar los extras seleccionados en cada producto de una orden
CREATE TABLE order_item_addons (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    id_order_has_product BIGINT NOT NULL,
    id_addon BIGINT NOT NULL,
    price_at_purchase DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (id_order_has_product) REFERENCES order_has_products(id) ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (id_addon) REFERENCES addons(id) ON UPDATE CASCADE ON DELETE CASCADE
);

-- SECCIÓN 1: Roles de Usuario
INSERT INTO roles(name, route, created_at, updated_at) VALUES
('CLIENTE', '/client/products/list', NOW(), NOW()),
('REPARTIDOR', '/delivery/orders/list', NOW(), NOW()),
('RESTAURANTE', '/restaurant/orders/list', NOW(), NOW());

-- SECCIÓN 2: Sucursales
INSERT INTO branches(name, address, lat, lng, phone, created_at, updated_at) VALUES
('Dados Pizza - Matriz Ixmiquilpan', 'Av. Insurgentes Ote. 75, Centro, 42300 Ixmiquilpan, Hgo.', 20.484123, -99.216345, '7711234567', NOW(), NOW()),
('Dados Pizza - El Fitzhi', 'Carretera México-Laredo Km. 159, 42320 El Fitzhi, Hgo.', 20.467890, -99.234567, '7712345678', NOW(), NOW()),
('Dados Pizza - Progreso de Obregón', 'Carretera Progreso-Ixmiquilpan, 42730 Progreso de Obregón, Hgo.', 20.356789, -99.198765, '7713456789', NOW(), NOW());

-- SECCIÓN 3: Catálogos de Productos
-- Tamaños
INSERT INTO sizes(name, created_at, updated_at) VALUES
('Personal', NOW(), NOW()),
('Mediana', NOW(), NOW()),
('Grande', NOW(), NOW()),
('Familiar', NOW(), NOW()),
('Cuadrada', NOW(), NOW());

-- Categorías
INSERT INTO categories(name, description, created_at, updated_at) VALUES
('Premium', 'Nuestras pizzas más completas y con más ingredientes.', NOW(), NOW()),
('Tradicional', 'Los sabores clásicos que nunca fallan.', NOW(), NOW()),
('Especialidad', 'Combinaciones únicas de la casa.', NOW(), NOW()),
('Megamix', 'La pizza ideal para compartir con todos.', NOW(), NOW()),
('Bebidas', 'Para acompañar tu pizza.', NOW(), NOW());

-- Productos (Pizzas y Bebidas)
-- El 'price' se deja en NULL para las pizzas, ya que su precio depende del tamaño.
-- Premium
INSERT INTO products(name, description, id_category, created_at, updated_at) VALUES
('Mexicana', 'Jamon, salami, tocino, chorizo, champiñones, pimiento morron, cebolla y jalapeño', (SELECT id FROM categories WHERE name = 'Premium'), NOW(), NOW()),
('Maxipizza', 'Jamon, salami, tocino, chorizo, salchicha y peperoni', (SELECT id FROM categories WHERE name = 'Premium'), NOW(), NOW()),
('Costeñita', 'Atun, cebolla, aceitunas, jalapeños y pimiento morron', (SELECT id FROM categories WHERE name = 'Premium'), NOW(), NOW()),
('Special', 'Jamon, tocino, chorizo, cebolla y pimiento morron', (SELECT id FROM categories WHERE name = 'Premium'), NOW(), NOW()),
('Cubana', 'Jamon, tocino, salami, champiñones y jalapeño', (SELECT id FROM categories WHERE name = 'Premium'), NOW(), NOW()),
('Azteca', 'Frijoles, tocino, chorizo, cebolla, y chiles en escabeche', (SELECT id FROM categories WHERE name = 'Premium'), NOW(), NOW());

-- Tradicional
INSERT INTO products(name, description, id_category, created_at, updated_at) VALUES
('Hawaiana', 'Jamon y piña', (SELECT id FROM categories WHERE name = 'Tradicional'), NOW(), NOW()),
('Chorimix', 'Piña, chorizo, jalapeño', (SELECT id FROM categories WHERE name = 'Tradicional'), NOW(), NOW()),
('Tropical', 'Piña, cereza y durazno', (SELECT id FROM categories WHERE name = 'Tradicional'), NOW(), NOW()),
('Peperoni', 'Peperoni', (SELECT id FROM categories WHERE name = 'Tradicional'), NOW(), NOW());

-- Especialidad
INSERT INTO products(name, description, id_category, created_at, updated_at) VALUES
('Dados', 'Peperoni, champiñones y pimiento morron', (SELECT id FROM categories WHERE name = 'Especialidad'), NOW(), NOW()),
('Marqueña', 'Jamon, tocino y champiñones', (SELECT id FROM categories WHERE name = 'Especialidad'), NOW(), NOW()),
('Chicken', 'Crema, pollo, rajas, elote y cebolla', (SELECT id FROM categories WHERE name = 'Especialidad'), NOW(), NOW()),
('Mitza', 'Jamon, tocino y chorizo', (SELECT id FROM categories WHERE name = 'Especialidad'), NOW(), NOW()),
('Salsiciia', 'Jamon, tocino, salchicha', (SELECT id FROM categories WHERE name = 'Especialidad'), NOW(), NOW()),
('Marianita', 'Jamon, tocino piña', (SELECT id FROM categories WHERE name = 'Especialidad'), NOW(), NOW());

-- Megamix (con precio fijo)
INSERT INTO products(name, description, price, id_category, created_at, updated_at) VALUES
('Megamix', 'Pizza cuadrada 4 especialidades - 16 rebanadas (mitza, hawaiana, especial y dados)', 269.00, (SELECT id FROM categories WHERE name = 'Megamix'), NOW(), NOW());

-- Bebidas (con precio fijo)
INSERT INTO products(name, description, price, id_category, created_at, updated_at) VALUES
('Agua 600ml', 'Agua embotellada de 600ml', 25.00, (SELECT id FROM categories WHERE name = 'Bebidas'), NOW(), NOW()),
('Refresco 600ml', 'Refresco de 600ml (varios sabores)', 27.00, (SELECT id FROM categories WHERE name = 'Bebidas'), NOW(), NOW()),
('Refresco 2lts', 'Refresco de 2 litros (varios sabores)', 49.00, (SELECT id FROM categories WHERE name = 'Bebidas'), NOW(), NOW());


-- SECCIÓN 4: Precios por Categoría y Tamaño
-- Precios Premium
INSERT INTO category_prices(id_category, id_size, price) VALUES
((SELECT id FROM categories WHERE name = 'Premium'), (SELECT id FROM sizes WHERE name = 'Personal'), 85.00),
((SELECT id FROM categories WHERE name = 'Premium'), (SELECT id FROM sizes WHERE name = 'Mediana'), 170.00),
((SELECT id FROM categories WHERE name = 'Premium'), (SELECT id FROM sizes WHERE name = 'Grande'), 190.00),
((SELECT id FROM categories WHERE name = 'Premium'), (SELECT id FROM sizes WHERE name = 'Familiar'), 220.00),
((SELECT id FROM categories WHERE name = 'Premium'), (SELECT id FROM sizes WHERE name = 'Cuadrada'), 285.00);

-- Precios Tradicional
INSERT INTO category_prices(id_category, id_size, price) VALUES
((SELECT id FROM categories WHERE name = 'Tradicional'), (SELECT id FROM sizes WHERE name = 'Personal'), 75.00),
((SELECT id FROM categories WHERE name = 'Tradicional'), (SELECT id FROM sizes WHERE name = 'Mediana'), 160.00),
((SELECT id FROM categories WHERE name = 'Tradicional'), (SELECT id FROM sizes WHERE name = 'Grande'), 180.00),
((SELECT id FROM categories WHERE name = 'Tradicional'), (SELECT id FROM sizes WHERE name = 'Familiar'), 210.00),
((SELECT id FROM categories WHERE name = 'Tradicional'), (SELECT id FROM sizes WHERE name = 'Cuadrada'), 245.00);

-- Precios Especialidad
INSERT INTO category_prices(id_category, id_size, price) VALUES
((SELECT id FROM categories WHERE name = 'Especialidad'), (SELECT id FROM sizes WHERE name = 'Personal'), 80.00),
((SELECT id FROM categories WHERE name = 'Especialidad'), (SELECT id FROM sizes WHERE name = 'Mediana'), 165.00),
((SELECT id FROM categories WHERE name = 'Especialidad'), (SELECT id FROM sizes WHERE name = 'Grande'), 185.00),
((SELECT id FROM categories WHERE name = 'Especialidad'), (SELECT id FROM sizes WHERE name = 'Familiar'), 215.00),
((SELECT id FROM categories WHERE name = 'Especialidad'), (SELECT id FROM sizes WHERE name = 'Cuadrada'), 255.00);

-- SECCIÓN 5: Addons y sus Precios
-- Addons
INSERT INTO addons(name, created_at, updated_at) VALUES
('Ingrediente Extra', NOW(), NOW()),
('Orilla de Queso Extra', NOW(), NOW());

-- Precios de Addons
INSERT INTO addon_prices(id_addon, id_size, price) VALUES
-- Ingrediente Extra
((SELECT id FROM addons WHERE name = 'Ingrediente Extra'), (SELECT id FROM sizes WHERE name = 'Personal'), 13.00),
((SELECT id FROM addons WHERE name = 'Ingrediente Extra'), (SELECT id FROM sizes WHERE name = 'Mediana'), 18.00),
((SELECT id FROM addons WHERE name = 'Ingrediente Extra'), (SELECT id FROM sizes WHERE name = 'Grande'), 23.00),
((SELECT id FROM addons WHERE name = 'Ingrediente Extra'), (SELECT id FROM sizes WHERE name = 'Familiar'), 28.00),
((SELECT id FROM addons WHERE name = 'Ingrediente Extra'), (SELECT id FROM sizes WHERE name = 'Cuadrada'), 35.00),
-- Orilla de Queso Extra
((SELECT id FROM addons WHERE name = 'Orilla de Queso Extra'), (SELECT id FROM sizes WHERE name = 'Personal'), 23.00),
((SELECT id FROM addons WHERE name = 'Orilla de Queso Extra'), (SELECT id FROM sizes WHERE name = 'Mediana'), 33.00),
((SELECT id FROM addons WHERE name = 'Orilla de Queso Extra'), (SELECT id FROM sizes WHERE name = 'Grande'), 33.00),
((SELECT id FROM addons WHERE name = 'Orilla de Queso Extra'), (SELECT id FROM sizes WHERE name = 'Familiar'), 43.00),
((SELECT id FROM addons WHERE name = 'Orilla de Queso Extra'), (SELECT id FROM sizes WHERE name = 'Cuadrada'), 47.00);

ALTER TABLE users
ADD COLUMN id_branch BIGINT NULL,
ADD FOREIGN KEY (id_branch) REFERENCES branches(id) ON DELETE SET NULL ON UPDATE CASCADE;